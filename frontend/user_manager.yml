openapi: 3.0.3
info:
  title: MovieSwipe User Manager API
  description: API for user authentication and profile management in MovieSwipe
  version: 1.0.0
  contact:
    name: MovieSwipe Team
    email: support@movieswipe.com

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.movieswipe.com
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from Google authentication

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: User's unique identifier
          example: "507f1f77bcf86cd799439011"
        googleId:
          type: string
          description: Google account ID
          example: "123456789012345678901"
        name:
          type: string
          description: User's display name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - googleId
        - name
        - email

    AuthRequest:
      type: object
      properties:
        idToken:
          type: string
          description: Google ID token from client-side authentication
          example: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFiYjM..."
      required:
        - idToken

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authenticated requests
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          description: User's display name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
      minProperties: 1

    UpdateUserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Authentication failed"

paths:
  /auth/google:
    post:
      summary: Authenticate user with Google
      description: Verifies Google ID token and creates/retrieves user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
            example:
              idToken: "eyJhbGciOiJSUzI1NiIsImtpZCI6IjFiYjM..."
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                user:
                  id: "507f1f77bcf86cd799439011"
                  googleId: "123456789012345678901"
                  name: "John Doe"
                  email: "john.doe@example.com"
                  createdAt: "2024-01-01T00:00:00.000Z"
                  updatedAt: "2024-01-01T00:00:00.000Z"
        '400':
          description: Bad request - missing or invalid ID token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Google ID token is required"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Authentication failed"

  /users/me:
    put:
      summary: Update user profile
      description: Updates the authenticated user's profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            example:
              name: "John Smith"
              email: "john.smith@example.com"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
              example:
                user:
                  id: "507f1f77bcf86cd799439011"
                  googleId: "123456789012345678901"
                  name: "John Smith"
                  email: "john.smith@example.com"
                  createdAt: "2024-01-01T00:00:00.000Z"
                  updatedAt: "2024-01-01T12:00:00.000Z"
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Access token required"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Failed to update profile"

  /health:
    get:
      summary: Health check
      description: Returns server health status
      tags:
        - System
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00.000Z"

tags:
  - name: Authentication
    description: User authentication operations
  - name: Users
    description: User profile management
  - name: System
    description: System health and status 